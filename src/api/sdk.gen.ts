// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { PostLoginData, PostLoginResponse, PostLogoutData, PostLogoutResponse, GetToolsData, GetToolsResponse, GetToolsError, PostToolsData, PostToolsResponse, PostToolsError, GetUsersData, GetUsersResponse, GetUsersError, PostUsersData, PostUsersResponse, PostUsersError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * 用户登录
 * 使用用户名密码进行登录
 */
export const postLogin = <ThrowOnError extends boolean = false>(options: Options<PostLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLoginResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 用户注销
 * 用户注销，清除会话、注销令牌
 */
export const postLogout = <ThrowOnError extends boolean = false>(options?: Options<PostLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostLogoutResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/logout',
        ...options
    });
};

/**
 * 工具列表
 * 获取工具
 */
export const getTools = <ThrowOnError extends boolean = false>(options?: Options<GetToolsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetToolsResponse, GetToolsError, ThrowOnError>({
        url: '/tools',
        ...options
    });
};

/**
 * 工具新增
 * 添加工具
 */
export const postTools = <ThrowOnError extends boolean = false>(options: Options<PostToolsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostToolsResponse, PostToolsError, ThrowOnError>({
        url: '/tools',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 用户列表
 * 获取所有用户
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, GetUsersError, ThrowOnError>({
        url: '/users',
        ...options
    });
};

/**
 * 新增用户
 * 新增用户
 */
export const postUsers = <ThrowOnError extends boolean = false>(options: Options<PostUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersResponse, PostUsersError, ThrowOnError>({
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};